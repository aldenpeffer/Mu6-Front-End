308 Front-End Notes:

Resizing window such that a horizontal scrollbar appears causes incorrect alignment of divs (footer with main-divs)

The state model is being ignored for now (library is not included in the View model, for example). This works but probably shouldn't.
    Once we've fleshed out what data should be maintained in the state we can re-implement the View model.

Lots of re-used code (every component has the same AppState interface, listens to Observable stream of view).
    Will need to do a bit of house-keeping to reduce the repeated code down the line.

Need to create models for Song, Album, Artist, library

Library Model
	library: { songs:[Song], albums:[Album], artists:[Artists] } 
	Approach 1. On any actions that modify the library, if the ajax call succeeds update the library
		on the front-end to reflect the modification (without requesting a fresh copy of library from back-end)
	Approach 2. Have a boolean 'hasChanged' property on the library object. On actions that modify the library,
		set the value of hasChanged to true. When accessing library, if hasChanged is true then request a 
		fresh copy of the library.  


--------------------
    To Do List
--------------------
Define menu options
Define possible views (menu options + non-menu option views)
Implement footer play-bar (album info on left, play/pause/skip buttons centered, runtime info, etc.)
Implement social bar on right (just connect to the state and have some dummy data)
Style the Views Correctly, Priority:
	1. Library - Song or Album/Artist(similar styling for these two)
	2. Playlist
	3. Browse
Style side bars (menu and social)
Style footer
Code Housekeeping:
	Create typing for Song, Artist, Album, Library objects to use instead of current untyped js objects
	Reduce redundanted code in component typescript files (export AppState from some other file,
		maybe extend the core state interactions from another class)
	Reduce redundant CSS (move shared CSS to global stylesheet)
???
PROFIT